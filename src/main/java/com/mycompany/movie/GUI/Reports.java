/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.movie.GUI;
import com.mycompany.movie.Movies.MovieLibrary;
import com.mycompany.movie.Book.Report;
import static com.mycompany.movie.Book.Report.getNumberOfSeats;
import com.mycompany.movie.Database;
import com.mycompany.movie.Movies.Movie;
import com.mycompany.movie.Movies.ScreenTime;
import java.awt.FlowLayout;
import javax.swing.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
/**
 *
 * @author MU
 */
public class Reports extends JPanel {

    /**
     * Creates new form Reports
     */
    public Reports(program prog) {
        initComponents();
        MovieLibrary.getMovies();
        setName("Reports");
        
         redo.addActionListener(new ActionListener(){
           @Override
           public void actionPerformed(ActionEvent e){
               prog.switchToPanel("MainMnue");
           }   
           });
         soldseat.addActionListener(new ActionListener(){
           @Override
           public void actionPerformed(ActionEvent e){
               prog.switchToPanel("SoldSeats");
               
           }   
           });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
  redo = new javax.swing.JButton();
soldseat = new javax.swing.JButton();
mostwatch = new javax.swing.JButton();
crowdtime = new javax.swing.JButton();
numberseat = new javax.swing.JButton();

// Set Button Properties
redo.setBackground(new java.awt.Color(51, 153, 255));
redo.setForeground(new java.awt.Color(255, 255, 255));
redo.setText("Back");


soldseat.setText("Number of Sold Seats");
soldseat.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        showSoldSeatsDialog();
    }
});

mostwatch.setText("Most Watched Movie");
mostwatch.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        showMostWatchedDialog();
    }
});

crowdtime.setText("Get Crowded Time");
crowdtime.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        showCrowdedTimeDialog();
    }
});

numberseat.setText("Get Number of Seats");
numberseat.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        showNumberOfSeatsDialog();
    }
});

// Layout Code
javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
this.setLayout(layout);
layout.setHorizontalGroup(
    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(redo)
            .addGap(15, 15, 15))
        .addGroup(layout.createSequentialGroup()
            .addGap(175, 175, 175)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(soldseat)
                .addComponent(mostwatch)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(crowdtime)
                    .addComponent(numberseat)))
            .addContainerGap(157, Short.MAX_VALUE))
);
layout.setVerticalGroup(
    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(15, 15, 15)
            .addComponent(redo)
            .addGap(28, 28, 28)
            .addComponent(soldseat)
            .addGap(28, 28, 28)
            .addComponent(mostwatch)
            .addGap(30, 30, 30)
            .addComponent(crowdtime)
            .addGap(27, 27, 27)
            .addComponent(numberseat)
            .addContainerGap(98, Short.MAX_VALUE))
);
    }

    private void showSoldSeatsDialog() {
    JDialog dialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Number of Sold Seats", true);
    dialog.setLayout(new FlowLayout());

    JLabel label = new JLabel("Select Movie:");
    JComboBox<String> movieComboBox = new JComboBox<>(); // Populate with movie titles.
        
        for (Movie movy : MovieLibrary.getMovies()) {
            movieComboBox.addItem(movy.getID() +"  "+ movy.getTitle());
        }

    JButton submitButton = new JButton("Get Sold Seats");
    JLabel resultLabel = new JLabel("Sold Seats: ");
    JLabel resultValue = new JLabel("0");

    submitButton.addActionListener(e -> {
        
        
        String movie =   (String) movieComboBox.getSelectedItem();
                
         // Your method to calculate sold seats.

         
                 int soldSeats= Database.getSoldSeats(Integer.parseInt(movie.split(" ")[0]));
//                 System.out.println("movie: "+movy.getTitle()+"   "+movy.getScreenTimes().get(0).getHall().getBookedSeats()+"    "+Report.numberOfSoldSeats(movy));
                System.out.println("no.: "+soldSeats);
          
               
       
               System.out.println("number:"+ soldSeats);          
        resultValue.setText(" "+soldSeats);
    
    });

    dialog.add(label);
    dialog.add(movieComboBox);
    dialog.add(submitButton);
    dialog.add(resultLabel);
    dialog.add(resultValue);

    JButton closeButton = new JButton("Close");
    closeButton.addActionListener(e -> dialog.dispose());
    dialog.add(closeButton);

    dialog.setSize(300, 200);
    dialog.setLocationRelativeTo(this);
    dialog.setVisible(true);
}
private void showMostWatchedDialog() {
    JDialog dialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Most Watched Movie", true);
    dialog.setLayout(new FlowLayout());

    JLabel resultLabel = new JLabel("Most Watched Movie: ");
    int sumBookedSeats=0;       //total seats for each movie
        int max=0;      //max for select the most watched movie
        List<Movie> mostWatchedMovie=new ArrayList<>();          //list of most watched movie if there more than one has same total number of seats
        //loop every movie in the movie library
        for (Movie movie : MovieLibrary.getMovies()) {
            sumBookedSeats=0; //re-initialize the total for next movie
            // Loop through each screening time for the current movie
            sumBookedSeats=Database.getSoldSeats(movie.getID());
            //chack if the total seats of this movie more than max
            if(sumBookedSeats>max){
                //if tru the clear the list from movie and update the max and add the new movie to the list
                mostWatchedMovie.clear();
                max=sumBookedSeats;
                mostWatchedMovie.add(movie);
            }
            else if(sumBookedSeats == max)
                // if there movie with total seats equal max the add it to the list
                mostWatchedMovie.add(movie);

        }
    String st="<html> ";
    for (Movie movie : mostWatchedMovie) {
        st+=movie.getTitle()+"";
    }
    st+="</html";
    JLabel resultValue = new JLabel(st); // Method to get the most-watched movie.

    dialog.add(resultLabel);
    dialog.add(resultValue);

    JButton closeButton = new JButton("Close");
    closeButton.addActionListener(e -> dialog.dispose());
    dialog.add(closeButton);

    dialog.setSize(300, 150);
    dialog.setLocationRelativeTo(this);
    dialog.setVisible(true);
}

private void showCrowdedTimeDialog() {
    JDialog dialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Get Crowded Time", true);
    dialog.setLayout(new FlowLayout());

    JLabel resultLabel = new JLabel("Crowded Time: ");
     String st="<html> ";
        List<Date[]> mostCrowdedTimes = new ArrayList<>();
        int max = 0;                                        // Variable to store the highest number of booked seats found
        int tempMax=0;
        // Loop through all movies in the library
        for (Movie movie : MovieLibrary.getMovies()) {

            // Loop through all screening times for each movie
            for (ScreenTime screenTime : movie.getScreenTimes()) {

                // Count the number of booked seats for this specific screen time
                tempMax = Database.getSoldSeatsByDateRange(Database.formatDate(screenTime.getStartDate()),Database.formatDate(screenTime.getEndDate()));

                // Check if this screening has more booked seats than the current maximum
                if (tempMax > max) {

                    // Found a new maximum, so clear the list and add this time period
                    mostCrowdedTimes.clear();
                    max = tempMax;     // Update max with the new highest number of booked seats

                    mostCrowdedTimes.add(new Date[] { screenTime.getStartDate(), screenTime.getEndDate() });   //add the new max into the Date list

                } else if (tempMax == max) {        // If this screening has the same number of booked seats as the max

                    mostCrowdedTimes.add(new Date[] { screenTime.getStartDate(), screenTime.getEndDate() });    //add the similar time to the Date list
                }
            }
        }
     
    for (var date : Report.getCrowdedTimes()) {
        st+="-";
        for (Date date1 : date) {
            
            st+= date1.toString()+" <br>";
        
        }
    }
    st+="</html";
    JLabel resultValue = new JLabel( st); // Method to get the crowded time.

    dialog.add(resultLabel);
    dialog.add(resultValue);

    JButton closeButton = new JButton("Close");
    closeButton.addActionListener(e -> dialog.dispose());
    dialog.add(closeButton);

    dialog.setSize(300, 150);
    dialog.setLocationRelativeTo(this);
    dialog.setVisible(true);
}
private void showNumberOfSeatsDialog() {
    JDialog dialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Get Number of Seats", true);
    dialog.setLayout(new FlowLayout());

    JLabel label = new JLabel("Select Hall:");
    
    JComboBox<String> screenTimeComboBox = new JComboBox<>(); // Populate with hall names or IDs.
    
    List<ScreenTime> screenTimes=new ArrayList<ScreenTime>();
   
    for (Movie movy : MovieLibrary.getMovies()) {
        for (ScreenTime screenTime : movy.getScreenTimes()) {
            screenTimes.add(screenTime);
        }
        
    }
         
        
        
      // Populate the combo box with formatted start dates from screenTimes
// Populate the combo box with formatted start dates from screenTimes
for (ScreenTime screenTime : screenTimes) {
    Date startDate = screenTime.getStartDate();
    Date endDate = screenTime.getEndDate();
    screenTimeComboBox.addItem(Database.formatDate(startDate)+"  "+Database.formatDate(endDate)); // Display formatted dates
}
    

    
    JButton submitButton = new JButton("Get Number of Seats");
    JLabel resultLabel = new JLabel("Number of Seats: ");
    JLabel resultValue = new JLabel("");

    submitButton.addActionListener(e -> {
         
        String selectedScreenTime =   (String) screenTimeComboBox.getSelectedItem();
                
        int numberOfSeats=Database.getSoldSeatsByDateRange(selectedScreenTime.split("  ")[0], selectedScreenTime.split("  ")[1]); // Your method to calculate sold seats.
            
        
        
        
        System.out.println("no.: "+numberOfSeats);
        resultValue.setText(" "+numberOfSeats);
    
    });

    dialog.add(label);
    dialog.add(screenTimeComboBox);
    dialog.add(submitButton);
    dialog.add(resultLabel);
    dialog.add(resultValue);

    JButton closeButton = new JButton("Close");
    closeButton.addActionListener(e -> dialog.dispose());
    dialog.add(closeButton);

    dialog.setSize(300, 200);
    dialog.setLocationRelativeTo(this);
    dialog.setVisible(true);
}

    /**
     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Reports().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton crowdtime;
    private javax.swing.JButton mostwatch;
    private javax.swing.JButton numberseat;
    private javax.swing.JButton redo;
    private javax.swing.JButton soldseat;
    JComboBox<String> movieComboBox;
    // End of variables declaration                   
}
